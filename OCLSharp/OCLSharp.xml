<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OCLSharp</name>
    </assembly>
    <members>
        <member name="T:OCLSharp.Attributes.ConstantAttribute">
            <summary>
            Marks a memory pointer as belonging to the __constant address space
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.GlobalAttribute">
            <summary>
            Marks a memory pointer as belonging to the __global address space
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.KernelAttribute">
            <summary>
            Marks a method as an OpenCL Kernel
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.LocalAttribute">
            <summary>
            Marks a memory pointer as belonging to the __local address space
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.NonKernelAttribute">
            <summary>
            Marks a method as an OpenCL Kernel
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.ReadOnlyAttribute">
            <summary>
            Marks a memory pointer as read only
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.ReadWriteAttribute">
            <summary>
            Marks a memory pointer as read and writable
            </summary>
        </member>
        <member name="T:OCLSharp.Attributes.WriteOnlyAttribute">
            <summary>
            Marks a memory pointer as write only
            </summary>
        </member>
        <member name="T:OCLSharp.Emulation.Emulator`1">
            <summary>
            Emulates C# code as if it was OpenCL
            Note that this is VERY inefficient and slow and only meant for debugging purposes
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Create a new emulator
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.CalculateWorkGroupCount">
            <summary>
            Calculate work group count in all dimensions
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.PadDimArray(System.Int32[])">
            <summary>
            Add padding to dimension array and set empty elements to 1
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.Run(System.String,System.Object[])">
            <summary>
            Run kernel by name
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.RunWorkGroup(System.Int32[],System.String,`0,System.Object[])">
            <summary>
            Run a specific work group in a kernel on a program
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.RunWorkItem(OCLSharp.Emulation.WorkItemArgs,System.String,System.Object[],`0)">
            <summary>
            Start a work item
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.CombineArgs(OCLSharp.Emulation.WorkItemArgs,System.Object[])">
            <summary>
            Combine work items args with kernel args
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.GetWorkItemArgs(System.Int32[])">
            <summary>
            Get work items arguments
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.Emulator`1.GetWorkGroupIDs">
            <summary>
            Get work group IDs
            </summary>
        </member>
        <member name="T:OCLSharp.Emulation.WorkItemArgs">
            <summary>
            Arguments for work items, used only for emulation
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_group_id(System.Int32)">
            <summary>
            Id of work group
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_global_offset(System.UInt32)">
            <summary>
            Returns the offset values specified in global_work_offset argument to clEnqueueNDRangeKernel. Valid values of dimindx are 0 to get_work_dim() - 1. For other values, get_global_offset() returns 0.
            For clEnqueueTask, this returns 0.
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_num_groups(System.Int32)">
            <summary>
            Number of work groups
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_work_dim(System.Int32)">
            <summary>
            Get how many dimensions are in use
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_global_size(System.UInt32)">
            <summary>
            Get size of entire work area
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_local_size(System.UInt32)">
            <summary>
            Get size of workgroup
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_global_id(System.UInt32)">
            <summary>
            Get workitem id withing entire work area
            </summary>
        </member>
        <member name="M:OCLSharp.Emulation.WorkItemArgs.get_local_id(System.UInt32)">
            <summary>
            Get workitem id within workgroup
            </summary>
        </member>
        <member name="T:OCLSharp.OpenCL.DataTypes.ScalarDataTypes.half">
            <summary>
            Half struct, uses a 32 bit float for emulation purporses
            </summary>
        </member>
        <member name="T:OCLSharp.OpenCL.DataTypes.ScalarDataTypes.size_t">
            <summary>
            size_t struct
            </summary>
        </member>
        <member name="T:OCLSharp.OpenCL.Program.OpenCLProgram">
            <summary>
            OpenCL program
            </summary>
            <summary>
            Base class for an OpenCL program
            </summary>
        </member>
        <member name="M:OCLSharp.OpenCL.Program.OpenCLProgram.Initialize(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Set program settings
            </summary>
        </member>
        <member name="M:OCLSharp.OpenCL.Program.OpenCLProgram.InitBarriers">
            <summary>
            Initialize barriers
            </summary>
        </member>
        <member name="M:OCLSharp.OpenCL.Program.OpenCLProgram.InitLocalMemory">
            <summary>
            Initialize local memory dictionary
            </summary>
        </member>
        <member name="M:OCLSharp.OpenCL.Program.OpenCLProgram.barrier(OCLSharp.Emulation.WorkItemArgs,System.Int32)">
            <summary>
            Barrier!
            </summary>
        </member>
        <member name="M:OCLSharp.OpenCL.Program.OpenCLProgram.GetLocalMem``1(OCLSharp.Emulation.WorkItemArgs,``0,System.String)">
            <summary>
            Sync local memory between work items
            </summary>
        </member>
        <member name="T:OCLSharp.OpenCL.Program.OpenCLFunctions">
            <summary>
            Please download the full method specification from here: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_C.pdf
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Please download the full method specification from here: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_C.pdf
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OCLSharp.Translating.ClassFinder">
            <summary>
            Find classes in a code file
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.ClassFinder.FindClass(System.String,System.Int32)">
            <summary>
            Find class!
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.ClassFinder.FindClasses(System.String)">
            <summary>
            Returns all classes in a code
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.ConstantFieldParser.GetConstantFieldEnd(System.String,System.Int32,System.String@)">
            <summary>
            Find end of a constant field
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.ConstantFieldParser.GetConstantFieldStart(System.String,System.Int32)">
            <summary>
            Check if code at specific index is start of a non - kernel method
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.ConstantFieldParser.Translate">
            <summary>
            Translate C# cernel to OpenCL kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.GetKernelEnd(System.String,System.Int32,System.String@)">
            <summary>
            Find end of a kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.GetKernelStart(System.String,System.Int32)">
            <summary>
            Check if code at specific index is start of a non - kernel method
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.TranslateHead(System.String)">
            <summary>
            Translate head part of kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.CountLeadingBlankCharacters(System.String)">
            <summary>
            Count how many "blank characters" there are at the beginning of a string
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.TranslateLocalMemoryWithinBody(System.String)">
            <summary>
            Translate local memory declaration within kernel body
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.TranslateLocalMemoryDeclaration(System.String)">
            <summary>
            Translate declaration of local memory
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.FindLocalMemEnd(System.Int32,System.String)">
            <summary>
            Find start of local memory declaration within kernel body
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.FindLocalMemStart(System.Int32,System.String)">
            <summary>
            Find end of local memory declaration within kernel body
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.TranslateBody(System.String)">
            <summary>
            Translate body of kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.KernelParser.Translate">
            <summary>
            Translate C# cernel to OpenCL kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.LineCommentParser.GetLineCommentStart(System.String,System.Int32)">
            <summary>
            Check if code at specific index is start of a line comment
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.LineCommentParser.GetLineCommentEnd(System.String,System.Int32,System.String@)">
            <summary>
            Check if code at specific index is start of a line comment
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.MethodParseHelpers.Decaptitate(System.String)">
            <summary>
            Separate method head from body
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.MethodParseHelpers.RemoveHeadSpaces(System.String)">
            <summary>
            Removes tabs, newlines and extra spaces from head of method
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.MethodParseHelpers.ExtractBodyContent(System.String)">
            <summary>
            Extract content withing method body
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.NonKernelParser.GetNonKernelEnd(System.String,System.Int32,System.String@)">
            <summary>
            Find end of a non kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.NonKernelParser.GetNonKernelStart(System.String,System.Int32)">
            <summary>
            Check if code at specific index is start of a non - kernel method
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.NonKernelParser.TranslateHead(System.String)">
            <summary>
            Translate head part of kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.NonKernelParser.TranslateBody(System.String)">
            <summary>
            Translate body of kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.NonKernelParser.Translate">
            <summary>
            Translate C# cernel to OpenCL kernel
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.Translator.#ctor">
            <summary>
            Create an empty <see cref="T:OCLSharp.Translating.Translator"/>
            </summary>
        </member>
        <member name="M:OCLSharp.Translating.Translator.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:OCLSharp.Translating.Translator"/> from C# source code
            </summary>
            <param name="csCode">Code in C# language</param>
            <param name="includeCommentsOutsideMethods">Code that has been commented out outside of any method should be included</param>
        </member>
        <member name="M:OCLSharp.Translating.Translator.Translate">
            <summary>
            Translates C# code to OpenCL
            </summary>
            <returns>OpenCL code</returns>
        </member>
    </members>
</doc>
